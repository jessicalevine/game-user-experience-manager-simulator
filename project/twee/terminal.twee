:: User List [tbar]
<<confsound>> \
<<run window.genUserListGames()>> \
<div class="terminal"> \
<<toast>> \
<<type $longtypespeed>>
  SELECT A USER TO IMRPOVE THEIR GAME EXPERIENCE
<</type>> \
<<type $shorttypespeed>> \

  <div class="games-row"> \
    <div class="games-column games-header">USER NUMBER</div> \
    <div class="games-column games-header">STATUS</div> \
    <div class="games-column games-header">TURN</div> \
  </div> \
  <<set _game_user_ids to Object.keys($games)>> \
  <<for _i to 0; _i lt _game_user_ids.length; _i++>> \
    <div class="games-row"> \
      <<set _game to $games[_game_user_ids[_i]]>>
      <div class="games-column">USER #_game.user</div> \
      <div class="games-column">_game.status</div> \
      <div class="games-column">_game.turn</div> \
    </div> \
  <</for>> \

<</type>> \
<<type $longtypespeed>> \
  ENTER USER NUMBER: #<<textbox "$gameuser" "■" "User Filter">>
<</type>> \
</div>
<<on "keydown">><<focusbox "gameuser">><</on>>

:: User Filter
/* Make sure there's a user before visiting their screen, else go to list */
<<script>>
  $(document).one(":passageend", function(ev) {
    let gameuser = State.variables.gameuser;
    if (gameuser === undefined || gameuser === null) {
      console.log("returning to list: lack of gameuser");
      Engine.play("User List");
    } else if (`${gameuser}` === `${State.variables.userid}`) {
      State.variables.toast = {
        text: "YOU DO NOT HAVE PERMISSION TO ACCESS THIS GAME.",
        ontype: function (ev) { window.removeCredits(5); }
      };
      Engine.play("User List");
      return;
    }

    let game = window.updateGameByUser(gameuser);
    if (game === undefined || game === null) {
      State.variables.toast = {
        text: "NO SUCH USER FOUND. TRY AGAIN.",
        ontype: function (ev) { window.removeCredits(1); }
      };
      Engine.play("User List");
    } else if (game.status === "FAILED") {
      State.variables.toast = {
        text: "THAT IS A FAILED GAME. TRY AGAIN.",
        ontype: function (ev) { window.removeCredits(1); }
      };
      Engine.play("User List");
    } else if (game.status === "SUCCESS") {
      State.variables.toast = {
        text: "DO NOT ATTEMPT TO CHEAT YOUR EMPLOYER.",
        ontype: function (ev) { window.removeCredits(20); }
      };
      Engine.play("User List");
    } else {
      let tut = State.variables.tutorial1complete;
      if (tut === undefined || tut === null || tut === false) {
        Engine.play("Tutorial 1 Topic Users")
        State.variables.tutorial1complete = true;
      } else {
        Engine.play("User Screen");
      }
    }
  });
<</script>> \

:: Tutorial 1 Topic Users [tbar]
<div class="terminal"> \
<<set $knowncmds.push("DELETE [NUMBER]")>>
<<type $shorttypespeed>> \
  PLEASE NOTE THAT ANY FORM OF LINGUISTIC COMMUNICATION WITH THE USER IS STRICTLY FORBIDDEN.
<</type>><<type $shorttypespeed start 525ms>>
  IT IS YOUR JOB TO GUIDE THE USER TOWARDS THE BEST POSSIBLE GAME EXPERIENCE. THIS IS BEST ACCOMPLISHED USING OUR PROPRIETY GAME USER EXPERIENCE IMPROVEMENT COMMANDS.
<</type>><<type $shorttypespeed start 525ms>>
REMEMBER: THE COST OF SERVER TIME IS YOUR RESPONSIBILITY AS AN INDEPENDENT CONTRACTOR.
<div id="cmdexample"></div> \
<</type>><<type $shorttypespeed start 525ms>>
  <<script>> document.getElementById("cmdexample").scrollIntoView(); <</script>> \
  FOR USER #$gameuser'S GAME, YOU MAY USE THE COMMAND "DELETE" FOLLOWED BY THE NUMBER OF AN ON SCREEN ELEMENT (SUCH AS "DELETE 1") TO REMOVE THAT CHOICE FROM THE USER.
<</type>> \
 \
<div id="simplify"></div>
<<type $shorttypespeed start 525ms>> \
  <<script>> document.getElementById("simplify").scrollIntoView(); <</script>> \
  THIS COMMAND WILL ALLOW YOU TO SIMPLIFY THE USER'S DECISION MAKING, INCREASING THEIR LIKLIEHOOD OF HAVING THE OPTIMAL EXPERIENCE. NO ONE LIKES TOO MUCH CHOICE.
<</type>> \
 \
<div id="contbox"></div>
<<type $shorttypespeed start 525ms>> \
  <<script>> document.getElementById("contbox").scrollIntoView(); <</script>> \
  CONTINUE: <<textbox "$cont" "■" "User Screen">>
<</type>>\
</div>

/* IMPORTANT WHITESPACE TO FORCE SCROLL */

<<on "keydown">><<focusbox "cont">><</on>> \

:: User Screen [tbar bbar tasked]
<<confsound>> \
<svg id="fakemouse" viewBox="11.8 9 16 22"><path d="M20,21l4.5,8l-3.4,2l-4.6-8.1L12,29V9l16,12H20z" fill="white" stroke="white"></path></svg> \
<div class="terminal"> \
<<toast>>\
  <<if !($gameuser === undefined)>> \
    <<set $curgame to $games[$gameuser]>> \
  <</if>> \
  <<if $curgame.loc === undefined || $curgame.loc === null>> \
    <<set $curgame.loc to $curgame.quest[$curgame.quest.start] >> \
  <</if>> \
<<type 10ms>>
  <<if window.didUserFail($curgame)>> \
    <<= window.getTextForLoc($curgame.loc)>>

    <div class="quest-failure"><<print $curgame.quest.failtext>></div>
    <<set $curgame.status to "FAILED">> \
    <div class="button-container"> \
      <div class="fake-button" id="reserved-1">1: CONTINUE</div> \
    </div>
  <<elseif window.didUserWin($curgame)>> \
    <<set $curgame.status to "SUCCESS">> \
    $curgame.loc.wintext

    <div class="button-container"> \
      <div class="fake-button" id="reserved-1">1: CONTINUE</div> \
    </div>
  <<else>> \
    <<= window.getTextForLoc($curgame.loc)>>

    <div class="button-container"> \
      <<set _buttons to window.buttonsForGameLoc($curgame.loc)>> \
      <<for _i to 0; _i lt _buttons.length; _i++>> \
        <<set _bn to _buttons[_i]>>
        <div class="fake-button" @id=_bn.dom_id @data-action-type=_bn.action_type @data-leveldata-key=_bn.leveldata_key> \
          _bn.display_text \
        </div> \
      <</for>> \
    </div> \
  <</if>> \
<</type>>
</div>

<<script>>
  $(document).one(':typingcomplete', function (ev) {
    if (State.variables.curgame == undefined || State.variables.curgame == null) {
      console.log("No active game");
      return;
    }

    if(State.variables.curgame.status === "SUCCESS") {
      window.add_credits(15);
    }

    if(State.variables.curgame.status === "FAILED") {
      window.removeCredits(20);
    }

    /* Choose random button ID to "mouse" over */
    let buttonids = window.getActiveFakeButtonIds();

    /* Move cursor and "click" when done */
    window.moveFakeMouseToRandElement(buttonids, function(clicked_elem) {
        State.variables.curgame.turn++;

        if (clicked_elem.dataset.actionType === "travel") {
          State.variables.curgame.loc = State.variables.curgame.quest[clicked_elem.dataset.leveldataKey];
        } else if (clicked_elem.dataset.actionType === "pickup") {
          /* Stays in same loc */
          let item_key = clicked_elem.dataset.leveldataKey;
          let item = State.variables.curgame.loc.items[item_key];

          State.variables.curgame.inventory.push(item);
          delete State.variables.curgame.loc.items[item_key];

          State.variables.toast = {
            text: "SUCCESSFULLY ACQUIRED " + item.display_name,
            ontype: function (ev) {  }
          };
        } else {
          console.error("Unrecognized action type");
        }

        let status = State.variables.curgame.status;
        if (status === "ACTIVE") {
          Engine.play("User Screen");

        } else if(status === "FAILED" || status === "SUCCESS") {
          State.variables.curgame = null;
          Engine.play("User List");
        }
    });
  });
<</script>>
<<on "keydown">><<focusbox "command">><</on>>\
